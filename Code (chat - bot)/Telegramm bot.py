from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from datetime import datetime
import json
import os
from content_forwarder import ContentForwarder

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
(
    MAIN_MENU, FILMS_MENU, SERIES_MENU, BOOKS_MENU,
    VIEW_NOTES, ADD_NOTE, EDIT_NOTE_CHOOSE, EDIT_NOTE, DELETE_NOTE,
    FILTER_MENU, FILTER_SELECTION, SERIES_FILTER_MENU, SERIES_FILTER_SELECTION,
    BOOKS_FILTER_MENU, BOOKS_FILTER_SELECTION,
    VIEW_CONTENT_LIST, VIEW_CONTENT_DETAILS, VIEW_FAVORITES, DELETE_FAVORITE
) = range(19)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "..."
application = Application.builder().token(TOKEN).build()

#–ì—Ä—É–ø–ø–∞ –≤ —Ç–≥
GROUP_CHAT_ID = -1002634234444

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
NOTES_FILE = "notes.json"

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
GENRES = ["–ö–æ–º–µ–¥–∏—è", "–î—Ä–∞–º–∞", "–ë–æ–µ–≤–∏–∫", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–£–∂–∞—Å—ã", "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º"]
COUNTRIES = ["–†–æ—Å—Å–∏—è", "–°–®–ê", "–§—Ä–∞–Ω—Ü–∏—è", "–ö–æ—Ä–µ—è", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"]
LANGUAGES = ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "–ö–æ—Ä–µ–π—Å–∫–∏–π"]
RATINGS = ["–í—ã—Å–æ–∫–∏–π (8+)", "–°—Ä–µ–¥–Ω–∏–π (5-7)", "–ù–∏–∑–∫–∏–π (–¥–æ 5)"]
YEARS = ["2020-2023", "2010-2019", "2000-2009", "1990-1999"]
AGES = ["0+", "6+", "12+", "16+", "18+"]

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥
BOOK_GENRES = ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–§—ç–Ω—Ç–µ–∑–∏", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–†–æ–º–∞–Ω", "–£–∂–∞—Å—ã", "–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"]
BOOK_COUNTRIES = COUNTRIES  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç—Ä–∞–Ω—ã, —á—Ç–æ –∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
BOOK_LANGUAGES = LANGUAGES  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —è–∑—ã–∫–∏, —á—Ç–æ –∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
BOOK_RATINGS = RATINGS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ä–µ–π—Ç–∏–Ω–≥–∏, —á—Ç–æ –∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
BOOK_YEARS = YEARS  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –≥–æ–¥—ã, —á—Ç–æ –∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
BOOK_AGES = AGES  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
BOOK_SERIES = ["–î–∞", "–ù–µ—Ç"]
BOOK_PUBLISHERS = ["–≠–∫—Å–º–æ", "–ê–°–¢", "–ü–∏—Ç–µ—Ä", "–ú–∞–Ω–Ω, –ò–≤–∞–Ω–æ–≤ –∏ –§–µ—Ä–±–µ—Ä", "–î—Ä–æ—Ñ–∞"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_notes():
    if os.path.exists(NOTES_FILE):
        with open(NOTES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
def save_notes(notes):
    with open(NOTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(notes, f, ensure_ascii=False, indent=2)

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_TEXT = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. 
–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ñ–∏–ª—å–º–∞–º–∏, —Å–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –∫–Ω–∏–≥–∞–º–∏. 
–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–µ–º! üé¨üì∫üìö
"""

HELP_TEXT = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üé¨ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –∫–Ω–∏–≥
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–º/–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º

üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. 
–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥".
"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = [["–°—Ç–∞—Ä—Ç", "–ü–æ–º–æ—â—å"], ["–§–∏–ª—å–º—ã", "–°–µ—Ä–∏–∞–ª—ã"], ["–ö–Ω–∏–≥–∏"]]

films_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

series_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

books_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

notes_menu_keyboard = [
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"],
    ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"],
    ["–ù–∞–∑–∞–¥"]
]

def create_keyboard(keyboard):
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_filter_options –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_filter_options(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str = 'films'):
    if category == 'films':
        keyboard = [
            [InlineKeyboardButton("–ü–æ –∂–∞–Ω—Ä—É", callback_data='filter_genre')],
            [InlineKeyboardButton("–ü–æ —Å—Ç—Ä–∞–Ω–µ", callback_data='filter_country')],
            [InlineKeyboardButton("–ü–æ —è–∑—ã–∫—É", callback_data='filter_language')],
            [InlineKeyboardButton("–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data='filter_rating')],
            [InlineKeyboardButton("–ü–æ –≥–æ–¥—É", callback_data='filter_year')],
            [InlineKeyboardButton("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data='filter_age')],
            [InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='apply_filters')],
            [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='reset_filters')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_films')]
        ]
    elif category == 'series':
        keyboard = [
            [InlineKeyboardButton("–ü–æ –∂–∞–Ω—Ä—É", callback_data='series_filter_genre')],
            [InlineKeyboardButton("–ü–æ —Å—Ç—Ä–∞–Ω–µ", callback_data='series_filter_country')],
            [InlineKeyboardButton("–ü–æ —è–∑—ã–∫—É", callback_data='series_filter_language')],
            [InlineKeyboardButton("–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data='series_filter_rating')],
            [InlineKeyboardButton("–ü–æ –≥–æ–¥—É", callback_data='series_filter_year')],
            [InlineKeyboardButton("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data='series_filter_age')],
            [InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='series_apply_filters')],
            [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='series_reset_filters')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_series')]
        ]
    elif category == 'books':
        keyboard = [
            [InlineKeyboardButton("–ü–æ –∂–∞–Ω—Ä—É", callback_data='books_filter_genre')],
            [InlineKeyboardButton("–ü–æ —Å—Ç—Ä–∞–Ω–µ", callback_data='books_filter_country')],
            [InlineKeyboardButton("–ü–æ —è–∑—ã–∫—É", callback_data='books_filter_language')],
            [InlineKeyboardButton("–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data='books_filter_rating')],
            [InlineKeyboardButton("–ü–æ –≥–æ–¥—É", callback_data='books_filter_year')],
            [InlineKeyboardButton("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data='books_filter_age')],
            [InlineKeyboardButton("–ü–æ —Å–µ—Ä–∏–∏", callback_data='books_filter_series')],
            [InlineKeyboardButton("–ü–æ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É", callback_data='books_filter_publisher')],
            [InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='books_apply_filters')],
            [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='books_reset_filters')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_books')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    filters = context.user_data.get('filters', {})
    filter_text = "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n" if filters else "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"
    for key, value in filters.items():
        filter_text += f"- {key}: {value}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"{filter_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            f"{filter_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=reply_markup)

async def handle_filter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    filters = context.user_data.get('filters', {})
    
    if data == 'apply_filters':
        if not filters:
            await query.edit_message_text(
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!",
                reply_markup=None)
            await show_filter_options(update, context)
            return FILTER_MENU
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filtered_movies = apply_filters(filters)
        
        if not filtered_movies:
            await query.edit_message_text(
                "–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=None)
        else:
            movies_list = "\n".join(f"{i+1}. {movie['title']} ({movie['year']})" 
                          for i, movie in enumerate(filtered_movies[:10]))
            await query.edit_message_text(
                f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(filtered_movies)}\n\n{movies_list}",
                reply_markup=None)
        
        await query.message.reply_text(
            "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
            reply_markup=create_keyboard(films_menu_keyboard))
        return FILMS_MENU
    
    elif data == 'reset_filters':
        context.user_data['filters'] = {}
        await query.edit_message_text(
            "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!",
            reply_markup=None)
        await show_filter_options(update, context)
        return FILTER_MENU
    
    elif data == 'back_to_films':
        await query.edit_message_text(
            "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
            reply_markup=None)
        await query.message.reply_text(
            "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
            reply_markup=create_keyboard(films_menu_keyboard))
        return FILMS_MENU
    
    elif data == 'back_to_filters':
        await show_filter_options(update, context)
        return FILTER_MENU
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        filter_type = data.split('_')[1]
        context.user_data['current_filter'] = filter_type
        
        if filter_type == 'genre':
            options = GENRES
        elif filter_type == 'country':
            options = COUNTRIES
        elif filter_type == 'language':
            options = LANGUAGES
        elif filter_type == 'rating':
            options = RATINGS
        elif filter_type == 'year':
            options = YEARS
        elif filter_type == 'age':
            options = AGES
        
        keyboard = [[InlineKeyboardButton(opt, callback_data=f'option_{opt}')] for opt in options]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {filter_type}:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return FILTER_SELECTION

async def handle_filter_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data == 'back_to_filters':
        await show_filter_options(update, context)
        return FILTER_MENU
    
    selected_option = data.split('_', 1)[1]
    filter_type = context.user_data['current_filter']
    context.user_data.setdefault('filters', {})[filter_type] = selected_option
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω {filter_type}: {selected_option}",
        reply_markup=None)
    await show_filter_options(update, context)
    return FILTER_MENU

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–∏–∞–ª–æ–≤
async def handle_series_filter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    filters = context.user_data.get('filters', {})
    
    if data == 'series_apply_filters':
        if not filters:
            await query.edit_message_text(
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!",
                reply_markup=None)
            await show_filter_options(update, context, 'series')
            return SERIES_FILTER_MENU
        
        filtered_series = apply_series_filters(filters)
        
        if not filtered_series:
            await query.edit_message_text(
                "–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=None)
        else:
            series_list = "\n".join(f"{i+1}. {series['title']} ({series['year']})" 
                          for i, series in enumerate(filtered_series[:10]))
            await query.edit_message_text(
                f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–∏–∞–ª–æ–≤: {len(filtered_series)}\n\n{series_list}",
                reply_markup=None)
        
        await query.message.reply_text(
            "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
            reply_markup=create_keyboard(series_menu_keyboard))
        return SERIES_MENU
    
    elif data == 'series_reset_filters':
        context.user_data['filters'] = {}
        await query.edit_message_text(
            "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!",
            reply_markup=None)
        await show_filter_options(update, context, 'series')
        return SERIES_FILTER_MENU
    
    elif data == 'back_to_series':
        await query.edit_message_text(
            "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
            reply_markup=None)
        await query.message.reply_text(
            "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
            reply_markup=create_keyboard(series_menu_keyboard))
        return SERIES_MENU
    
    elif data == 'back_to_filters':
        await show_filter_options(update, context, 'series')
        return SERIES_FILTER_MENU
    
    else:
        filter_type = data.split('_')[2]
        context.user_data['current_filter'] = filter_type
        
        if filter_type == 'genre':
            options = GENRES
        elif filter_type == 'country':
            options = COUNTRIES
        elif filter_type == 'language':
            options = LANGUAGES
        elif filter_type == 'rating':
            options = RATINGS
        elif filter_type == 'year':
            options = YEARS
        elif filter_type == 'age':
            options = AGES
        
        keyboard = [[InlineKeyboardButton(opt, callback_data=f'series_option_{opt}')] for opt in options]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {filter_type}:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return SERIES_FILTER_SELECTION

async def handle_series_filter_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data == 'back_to_filters':
        await show_filter_options(update, context, 'series')
        return SERIES_FILTER_MENU
    
    selected_option = data.split('_', 2)[2]
    filter_type = context.user_data['current_filter']
    context.user_data.setdefault('filters', {})[filter_type] = selected_option
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω {filter_type}: {selected_option}",
        reply_markup=None)
    await show_filter_options(update, context, 'series')
    return SERIES_FILTER_MENU

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥
async def handle_books_filter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    filters = context.user_data.get('filters', {})
    
    if data == 'books_apply_filters':
        if not filters:
            await query.edit_message_text(
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!",
                reply_markup=None)
            await show_filter_options(update, context, 'books')
            return BOOKS_FILTER_MENU
        
        filtered_books = apply_books_filters(filters)
        
        if not filtered_books:
            await query.edit_message_text(
                "–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=None)
        else:
            books_list = "\n".join(f"{i+1}. {book['title']} ({book['author']}, {book['year']})" 
                          for i, book in enumerate(filtered_books[:10]))
            await query.edit_message_text(
                f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(filtered_books)}\n\n{books_list}",
                reply_markup=None)
        
        await query.message.reply_text(
            "–ú–µ–Ω—é –∫–Ω–∏–≥",
            reply_markup=create_keyboard(books_menu_keyboard))
        return BOOKS_MENU
    
    elif data == 'books_reset_filters':
        context.user_data['filters'] = {}
        await query.edit_message_text(
            "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!",
            reply_markup=None)
        await show_filter_options(update, context, 'books')
        return BOOKS_FILTER_MENU
    
    elif data == 'back_to_books':
        await query.edit_message_text(
            "–ú–µ–Ω—é –∫–Ω–∏–≥",
            reply_markup=None)
        await query.message.reply_text(
            "–ú–µ–Ω—é –∫–Ω–∏–≥",
            reply_markup=create_keyboard(books_menu_keyboard))
        return BOOKS_MENU
    
    elif data == 'back_to_filters':
        await show_filter_options(update, context, 'books')
        return BOOKS_FILTER_MENU
    
    else:
        filter_type = data.split('_')[2]
        context.user_data['current_filter'] = filter_type
        
        if filter_type == 'genre':
            options = BOOK_GENRES
        elif filter_type == 'country':
            options = BOOK_COUNTRIES
        elif filter_type == 'language':
            options = BOOK_LANGUAGES
        elif filter_type == 'rating':
            options = BOOK_RATINGS
        elif filter_type == 'year':
            options = BOOK_YEARS
        elif filter_type == 'age':
            options = BOOK_AGES
        elif filter_type == 'series':
            options = BOOK_SERIES
        elif filter_type == 'publisher':
            options = BOOK_PUBLISHERS
        
        keyboard = [[InlineKeyboardButton(opt, callback_data=f'books_option_{opt}')] for opt in options]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_filters')])
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {filter_type}:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return BOOKS_FILTER_SELECTION

async def handle_books_filter_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data == 'back_to_filters':
        await show_filter_options(update, context, 'books')
        return BOOKS_FILTER_MENU
    
    selected_option = data.split('_', 2)[2]
    filter_type = context.user_data['current_filter']
    context.user_data.setdefault('filters', {})[filter_type] = selected_option
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω {filter_type}: {selected_option}",
        reply_markup=None)
    await show_filter_options(update, context, 'books')
    return BOOKS_FILTER_MENU

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    forwarder = context.bot_data.get('forwarder')
    if not forwarder:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    user_id = str(update.message.from_user.id if update.message else update.callback_query.from_user.id)
    favorites = forwarder.favorites.get(user_id, {})
    
    if not any(favorites.values()):
        if update.message:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                reply_markup=create_keyboard(films_menu_keyboard if context.user_data.get('current_category') == 'films' 
                                          else series_menu_keyboard if context.user_data.get('current_category') == 'series'
                                          else books_menu_keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                reply_markup=None
            )
            await update.callback_query.message.reply_text(
                "–ú–µ–Ω—é",
                reply_markup=create_keyboard(films_menu_keyboard if context.user_data.get('current_category') == 'films' 
                                          else series_menu_keyboard if context.user_data.get('current_category') == 'series'
                                          else books_menu_keyboard)
            )
        return FILMS_MENU if context.user_data.get('current_category') == 'films' else SERIES_MENU if context.user_data.get('current_category') == 'series' else BOOKS_MENU
    
    keyboard = []
    for content_type, items in favorites.items():
        if not items:
            continue
            
        for item in items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑–µ
            if item in forwarder.content_db.get(content_type, {}):
                keyboard.append([InlineKeyboardButton(
                    f"{'üé¨' if content_type == 'films' else 'üì∫' if content_type == 'series' else 'üìö'} {item}",
                    callback_data=f"view_{content_type}_{item}"
                )])
    
    if not keyboard:
        if update.message:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                reply_markup=create_keyboard(films_menu_keyboard if context.user_data.get('current_category') == 'films' 
                                          else series_menu_keyboard if context.user_data.get('current_category') == 'series'
                                          else books_menu_keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
                reply_markup=None
            )
            await update.callback_query.message.reply_text(
                "–ú–µ–Ω—é",
                reply_markup=create_keyboard(films_menu_keyboard if context.user_data.get('current_category') == 'films' 
                                          else series_menu_keyboard if context.user_data.get('current_category') == 'series'
                                          else books_menu_keyboard)
            )
        return FILMS_MENU if context.user_data.get('current_category') == 'films' else SERIES_MENU if context.user_data.get('current_category') == 'series' else BOOKS_MENU
    
    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="delete_favorites")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_favorites")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
            reply_markup=reply_markup
        )
    return VIEW_FAVORITES

async def handle_favorites_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∏–∑ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_from_favorites":
        await query.edit_message_text("–ú–µ–Ω—é")
        current_category = context.user_data.get('current_category', 'films')
        if current_category == 'films':
            await query.message.reply_text(
                "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
                reply_markup=create_keyboard(films_menu_keyboard))
            return FILMS_MENU
        elif current_category == 'series':
            await query.message.reply_text(
                "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
                reply_markup=create_keyboard(series_menu_keyboard))
            return SERIES_MENU
        else:
            await query.message.reply_text(
                "–ú–µ–Ω—é –∫–Ω–∏–≥",
                reply_markup=create_keyboard(books_menu_keyboard))
            return BOOKS_MENU
    
    elif data == "delete_favorites":
        forwarder = context.bot_data.get('forwarder')
        user_id = str(query.from_user.id)
        favorites = forwarder.favorites.get(user_id, {})
        
        keyboard = []
        for content_type, items in favorites.items():
            if not items:
                continue
                
            for item in items:
                if item in forwarder.content_db.get(content_type, {}):
                    keyboard.append([InlineKeyboardButton(
                        f"‚ùå {item}",
                        callback_data=f"remove_{content_type}_{item}"
                    )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_favorites")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:",
            reply_markup=reply_markup
        )
        return DELETE_FAVORITE
    
    elif data.startswith("remove_"):
        _, content_type, content_name = data.split("_", 2)
        forwarder = context.bot_data.get('forwarder')
        user_id = str(query.from_user.id)
        
        if user_id in forwarder.favorites and content_type in forwarder.favorites[user_id]:
            if content_name in forwarder.favorites[user_id][content_type]:
                forwarder.favorites[user_id][content_type].remove(content_name)
                forwarder.save_favorites()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                message = query.message
                reply_markup = message.reply_markup
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                new_keyboard = []
                for row in reply_markup.inline_keyboard:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    if not (len(row) == 1 and row[0].callback_data == f"remove_{content_type}_{content_name}"):
                        new_keyboard.append(row)
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not any(forwarder.favorites[user_id].values()):
                    await query.edit_message_text(
                        "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ",
                        reply_markup=None
                    )
                    current_category = context.user_data.get('current_category', 'films')
                    if current_category == 'films':
                        await query.message.reply_text(
                            "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
                            reply_markup=create_keyboard(films_menu_keyboard))
                        return FILMS_MENU
                    elif current_category == 'series':
                        await query.message.reply_text(
                            "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
                            reply_markup=create_keyboard(series_menu_keyboard))
                        return SERIES_MENU
                    else:
                        await query.message.reply_text(
                            "–ú–µ–Ω—é –∫–Ω–∏–≥",
                            reply_markup=create_keyboard(books_menu_keyboard))
                        return BOOKS_MENU
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await query.edit_message_text(
                        "‚úÖ –£–¥–∞–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –µ—â–µ —É–¥–∞–ª–∏—Ç—å:",
                        reply_markup=InlineKeyboardMarkup(new_keyboard)
                    )
                return DELETE_FAVORITE
    
    elif data == "back_to_favorites":
        return await show_favorites(update, context)
    
    elif data.startswith("view_"):
        return await handle_content_list_callback(update, context)
    
    return VIEW_FAVORITES

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
async def show_content_list(update: Update, context: ContextTypes.DEFAULT_TYPE, content_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    forwarder = context.bot_data.get('forwarder')
    if not forwarder:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    content_db = forwarder.content_db.get(content_type, {})
    if not content_db:
        await update.message.reply_text(f"–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç {content_type}.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    keyboard = []
    items_per_page = 5
    page = int(context.args[0]) if context.args and context.args[0].isdigit() else 0
    
    items = list(content_db.items())
    total_pages = (len(items) + items_per_page - 1) // items_per_page
    
    for item in items[page*items_per_page : (page+1)*items_per_page]:
        title = item[0]
        metadata = item[1]['metadata']
        year = metadata.get('year', '')
        button_text = f"{title} ({year})" if year else title
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_{content_type}_{title}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{content_type}_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_{content_type}_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"back_to_{content_type}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ {content_type} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):",
        reply_markup=reply_markup
    )
    return VIEW_CONTENT_LIST

async def films_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤"""
    return await show_content_list(update, context, "films")

async def series_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    return await show_content_list(update, context, "series")

async def books_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    return await show_content_list(update, context, "books")

async def handle_content_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("view_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        _, content_type, content_name = data.split("_", 2)
        forwarder = context.bot_data.get('forwarder')
        content_data = forwarder.content_db[content_type].get(content_name)
        
        if not content_data:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return VIEW_CONTENT_LIST
        
        meta = content_data["metadata"]
        caption = f"{content_name}\n"
        
        if content_type == "films":
            caption += f"–ì–æ–¥: {meta.get('year', '?')}\n–ñ–∞–Ω—Ä: {meta.get('genre', '?')}\n–°—Ç—Ä–∞–Ω–∞: {meta.get('country', '?')}"
        elif content_type == "series":
            caption += f"–°–µ–∑–æ–Ω: {meta.get('season', '1')}\n–°–µ—Ä–∏—è: {meta.get('episode', '1')}\n–ì–æ–¥: {meta.get('year', '?')}\n–ñ–∞–Ω—Ä: {meta.get('genre', '?')}"
        elif content_type == "books":
            caption += f"–ê–≤—Ç–æ—Ä: {meta.get('author', '?')}\n–ì–æ–¥: {meta.get('year', '?')}\n–ñ–∞–Ω—Ä: {meta.get('genre', '?')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üì© –ü–æ–ª—É—á–∏—Ç—å", callback_data=f"send_{content_type}_{content_name}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"list_{content_type}_0")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            caption,
            reply_markup=reply_markup
        )
        return VIEW_CONTENT_DETAILS
    
    elif data.startswith("list_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        _, content_type, page = data.split("_")
        page = int(page)
        
        forwarder = context.bot_data.get('forwarder')
        content_db = forwarder.content_db.get(content_type, {})
        items_per_page = 5
        total_pages = (len(content_db) + items_per_page - 1) // items_per_page
        
        keyboard = []
        items = list(content_db.items())
        
        for item in items[page*items_per_page : (page+1)*items_per_page]:
            title = item[0]
            metadata = item[1]['metadata']
            year = metadata.get('year', '')
            button_text = f"{title} ({year})" if year else title
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_{content_type}_{title}")])
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{content_type}_{page-1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_{content_type}_{page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"back_to_{content_type}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ {content_type} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):",
            reply_markup=reply_markup
        )
        return VIEW_CONTENT_LIST
    
    elif data.startswith("back_to_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        content_type = data.split("_")[2]
        
        if content_type == "films":
            await query.edit_message_text(
                "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
                reply_markup=None)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–∞–º–∏",
                reply_markup=create_keyboard(films_menu_keyboard))
            return FILMS_MENU
        elif content_type == "series":
            await query.edit_message_text(
                "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
                reply_markup=None)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–∏–∞–ª–∞–º–∏",
                reply_markup=create_keyboard(series_menu_keyboard))
            return SERIES_MENU
        elif content_type == "books":
            await query.edit_message_text(
                "–ú–µ–Ω—é –∫–Ω–∏–≥",
                reply_markup=None)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–∏–≥–∞–º–∏",
                reply_markup=create_keyboard(books_menu_keyboard))
            return BOOKS_MENU
    
    return VIEW_CONTENT_LIST


def apply_filters(filters):
    """–í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    return []

def apply_series_filters(filters):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    return []

def apply_books_filters(filters):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()

    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=create_keyboard(main_menu_keyboard)
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–°—Ç–∞—Ä—Ç":
        # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
        return await start(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        # –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /help
        await help_command(update, context)
        return MAIN_MENU
    elif text == "–§–∏–ª—å–º—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–∞–º–∏",
            reply_markup=create_keyboard(films_menu_keyboard)
        )
        return FILMS_MENU
    elif text == "–°–µ—Ä–∏–∞–ª—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–∏–∞–ª–∞–º–∏",
            reply_markup=create_keyboard(series_menu_keyboard)
        )
        return SERIES_MENU
    elif text == "–ö–Ω–∏–≥–∏":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–∏–≥–∞–º–∏",
            reply_markup=create_keyboard(books_menu_keyboard)
        )
        return BOOKS_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU

# –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤/–∫–Ω–∏–≥
async def films_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'films'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Ñ–∏–ª—å–º–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    elif text == "–§–∏–ª—å—Ç—Ä":
        context.user_data['filters'] = {}
        context.user_data['current_category'] = 'films'
        await show_filter_options(update, context, 'films')
        return FILTER_MENU
    elif text == "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤":
        return await films_list(update, context)
    elif text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        context.user_data['current_category'] = 'films'
        return await show_favorites(update, context)
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(films_menu_keyboard))
        return FILMS_MENU

# –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤/–∫–Ω–∏–≥
async def series_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'series'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    elif text == "–§–∏–ª—å—Ç—Ä":
        context.user_data['filters'] = {}
        context.user_data['current_category'] = 'series'
        await show_filter_options(update, context, 'series')
        return SERIES_FILTER_MENU
    elif text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤":
        return await series_list(update, context)
    elif text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        context.user_data['current_category'] = 'series'
        return await show_favorites(update, context)
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(series_menu_keyboard))
        return SERIES_MENU

# –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤/–∫–Ω–∏–≥
async def books_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'books'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ –∫–Ω–∏–≥–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    elif text == "–§–∏–ª—å—Ç—Ä":
        context.user_data['filters'] = {}
        context.user_data['current_category'] = 'books'
        await show_filter_options(update, context, 'books')
        return BOOKS_FILTER_MENU
    elif text == "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥":
        return await books_list(update, context)
    elif text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        context.user_data['current_category'] = 'books'
        return await show_favorites(update, context)
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(books_menu_keyboard))
        return BOOKS_MENU

async def view_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    
    if text == "–ù–∞–∑–∞–¥":
        if category == 'films':
            await update.message.reply_text(
                "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
                reply_markup=create_keyboard(films_menu_keyboard))
            return FILMS_MENU
        elif category == 'series':
            await update.message.reply_text(
                "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
                reply_markup=create_keyboard(series_menu_keyboard))
            return SERIES_MENU
        elif category == 'books':
            await update.message.reply_text(
                "–ú–µ–Ω—é –∫–Ω–∏–≥",
                reply_markup=create_keyboard(books_menu_keyboard))
            return BOOKS_MENU
    
    notes = load_notes()
    user_notes = notes.get(user_id, {}).get(category, {})
    
    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏":
        if not user_notes:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=create_keyboard(notes_menu_keyboard))
        else:
            notes_list = "\n".join(
                f"{i+1}. {note['text']} ({note['date']})"
                for i, note in enumerate(user_notes.values()))
            await update.message.reply_text(
                f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_list}",
                reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=ReplyKeyboardRemove())
        return ADD_NOTE
    
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if not user_notes:
            await update.message.reply_text(
                "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=create_keyboard(notes_menu_keyboard))
            return VIEW_NOTES
        
        notes_list = "\n".join(
            f"{i+1}. {note['text']}"
            for i, note in enumerate(user_notes.values()))
        context.user_data['notes'] = user_notes
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{notes_list}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove())
        return EDIT_NOTE_CHOOSE
    
    elif text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if not user_notes:
            await update.message.reply_text(
                "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=create_keyboard(notes_menu_keyboard))
            return VIEW_NOTES
        
        notes_list = "\n".join(
            f"{i+1}. {note['text']}"
            for i, note in enumerate(user_notes.values()))
        context.user_data['notes'] = user_notes
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{notes_list}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove())
        return DELETE_NOTE
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES

async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    note_text = update.message.text
    current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    notes = load_notes()
    if user_id not in notes:
        notes[user_id] = {}
    if category not in notes[user_id]:
        notes[user_id][category] = {}
    
    note_id = str(len(notes[user_id][category]) + 1)
    
    notes[user_id][category][note_id] = {
        'text': note_text,
        'date': current_date
    }
    
    save_notes(notes)
    
    await update.message.reply_text(
        f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–î–∞—Ç–∞: {current_date}",
        reply_markup=create_keyboard(notes_menu_keyboard))
    return VIEW_NOTES

async def edit_note_choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        note_num = int(update.message.text) - 1
        user_notes = context.user_data['notes']
        note_ids = list(user_notes.keys())
        
        if 0 <= note_num < len(note_ids):
            note_id = note_ids[note_num]
            context.user_data['edit_note_id'] = note_id
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n{user_notes[note_id]['text']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                reply_markup=ReplyKeyboardRemove())
            return EDIT_NOTE
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=ReplyKeyboardRemove())
            return EDIT_NOTE_CHOOSE
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=ReplyKeyboardRemove())
        return EDIT_NOTE_CHOOSE

async def edit_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    note_id = context.user_data.get('edit_note_id')
    new_text = update.message.text
    
    notes = load_notes()
    if user_id in notes and category in notes[user_id] and note_id in notes[user_id][category]:
        notes[user_id][category][note_id]['text'] = new_text
        notes[user_id][category][note_id]['date'] = datetime.now().strftime("%d.%m.%Y %H:%M")
        save_notes(notes)
        
        await update.message.reply_text(
            "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=create_keyboard(notes_menu_keyboard))
    else:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.",
            reply_markup=create_keyboard(notes_menu_keyboard))
    
    return VIEW_NOTES

async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        note_num = int(update.message.text) - 1
        user_id = str(update.message.from_user.id)
        category = context.user_data.get('category', '')
        user_notes = context.user_data['notes']
        note_ids = list(user_notes.keys())
        
        if 0 <= note_num < len(note_ids):
            note_id = note_ids[note_num]
            
            notes = load_notes()
            if user_id in notes and category in notes[user_id] and note_id in notes[user_id][category]:
                del notes[user_id][category][note_id]
                save_notes(notes)
                
                await update.message.reply_text(
                    "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=create_keyboard(notes_menu_keyboard))
            else:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.",
                    reply_markup=create_keyboard(notes_menu_keyboard))
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.",
                reply_markup=create_keyboard(notes_menu_keyboard))
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=create_keyboard(notes_menu_keyboard))
    
    return VIEW_NOTES

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(HELP_TEXT)

# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main()
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^(–°—Ç–∞—Ä—Ç|–ü–æ–º–æ—â—å|–§–∏–ª—å–º—ã|–°–µ—Ä–∏–∞–ª—ã|–ö–Ω–∏–≥–∏)$"), main_menu)
            ],

            FILMS_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), films_menu)
            ],
            SERIES_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), series_menu)
            ],
            BOOKS_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), books_menu)
            ],
            VIEW_NOTES: [
                MessageHandler(filters.Regex("^(–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏|–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É|–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–ù–∞–∑–∞–¥)$"), view_notes)
            ],
            ADD_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_note)
            ],
            EDIT_NOTE_CHOOSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_note_choose)
            ],
            EDIT_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_note)
            ],
            DELETE_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_note)
            ],
            FILTER_MENU: [
                CallbackQueryHandler(handle_filter_selection)
            ],
            FILTER_SELECTION: [
                CallbackQueryHandler(handle_filter_option)
            ],
            SERIES_FILTER_MENU: [
                CallbackQueryHandler(handle_series_filter_selection)
            ],
            SERIES_FILTER_SELECTION: [
                CallbackQueryHandler(handle_series_filter_option)
            ],
            BOOKS_FILTER_MENU: [
                CallbackQueryHandler(handle_books_filter_selection)
            ],
            BOOKS_FILTER_SELECTION: [
                CallbackQueryHandler(handle_books_filter_option)
            ],
            VIEW_CONTENT_LIST: [
                CallbackQueryHandler(handle_content_list_callback)
            ],
            VIEW_CONTENT_DETAILS: [
                CallbackQueryHandler(handle_content_list_callback)  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            ],
            VIEW_FAVORITES: [
                CallbackQueryHandler(handle_favorites_callback)
            ],
            DELETE_FAVORITE: [
                CallbackQueryHandler(handle_favorites_callback)
            ],
        },
        fallbacks=[
            CommandHandler('start', start), 
            CommandHandler('cancel', cancel)
        ],
        allow_reentry=True
    )
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ContentForwarder –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    forwarder = ContentForwarder(GROUP_CHAT_ID)
    application.bot_data['forwarder'] = forwarder

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    forwarder.register_handlers(application)
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling()

if __name__ == '__main__':
    main()
