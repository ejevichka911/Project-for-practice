from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from datetime import datetime
import json
import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU, FILMS_MENU, SERIES_MENU, BOOKS_MENU,
    VIEW_NOTES, ADD_NOTE, EDIT_NOTE_CHOOSE, EDIT_NOTE, DELETE_NOTE
) = range(9)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7462511961:AAG2LwhbWPX3GHP-wLHmMHnohu81l9_fWoQ"
application = Application.builder().token(TOKEN).build()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
NOTES_FILE = "notes.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_notes():
    if os.path.exists(NOTES_FILE):
        with open(NOTES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
def save_notes(notes):
    with open(NOTES_FILE, 'w', encoding='utf-8') as f:
        json.dump(notes, f, ensure_ascii=False, indent=2)

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_TEXT = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. 
–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ñ–∏–ª—å–º–∞–º–∏, —Å–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –∫–Ω–∏–≥–∞–º–∏. 
–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–µ–º! üé¨üì∫üìö
"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = [["–§–∏–ª—å–º—ã", "–°–µ—Ä–∏–∞–ª—ã"], ["–ö–Ω–∏–≥–∏"]]

films_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

series_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

books_menu_keyboard = [
    ["–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    ["–§–∏–ª—å—Ç—Ä", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
    ["–ó–∞–º–µ—Ç–∫–∏", "–ù–∞–∑–∞–¥"]
]

notes_menu_keyboard = [
    ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"],
    ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"],
    ["–ù–∞–∑–∞–¥"]
]

def create_keyboard(keyboard):
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=create_keyboard(main_menu_keyboard)
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–§–∏–ª—å–º—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–∞–º–∏",
            reply_markup=create_keyboard(films_menu_keyboard)
        )
        return FILMS_MENU
    elif text == "–°–µ—Ä–∏–∞–ª—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–∏–∞–ª–∞–º–∏",
            reply_markup=create_keyboard(series_menu_keyboard)
        )
        return SERIES_MENU
    elif text == "–ö–Ω–∏–≥–∏":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–∏–≥–∞–º–∏",
            reply_markup=create_keyboard(books_menu_keyboard)
        )
        return BOOKS_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU

async def films_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'films'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Ñ–∏–ª—å–º–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(films_menu_keyboard))
        return FILMS_MENU

async def series_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'series'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(series_menu_keyboard))
        return SERIES_MENU

async def books_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_keyboard(main_menu_keyboard))
        return MAIN_MENU
    elif text == "–ó–∞–º–µ—Ç–∫–∏":
        context.user_data['category'] = 'books'
        await update.message.reply_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ –∫–Ω–∏–≥–∞—Ö",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    else:
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ - {text}. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=create_keyboard(books_menu_keyboard))
        return BOOKS_MENU

async def view_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    
    if text == "–ù–∞–∑–∞–¥":
        if category == 'films':
            await update.message.reply_text(
                "–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤",
                reply_markup=create_keyboard(films_menu_keyboard))
            return FILMS_MENU
        elif category == 'series':
            await update.message.reply_text(
                "–ú–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤",
                reply_markup=create_keyboard(series_menu_keyboard))
            return SERIES_MENU
        elif category == 'books':
            await update.message.reply_text(
                "–ú–µ–Ω—é –∫–Ω–∏–≥",
                reply_markup=create_keyboard(books_menu_keyboard))
            return BOOKS_MENU
    
    notes = load_notes()
    user_notes = notes.get(user_id, {}).get(category, {})
    
    if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏":
        if not user_notes:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=create_keyboard(notes_menu_keyboard))
        else:
            notes_list = "\n".join(
                f"{i+1}. {note['text']} ({note['date']})"
                for i, note in enumerate(user_notes.values()))
            await update.message.reply_text(
                f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_list}",
                reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES
    
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=ReplyKeyboardRemove())
        return ADD_NOTE
    
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if not user_notes:
            await update.message.reply_text(
                "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=create_keyboard(notes_menu_keyboard))
            return VIEW_NOTES
        
        notes_list = "\n".join(
            f"{i+1}. {note['text']}"
            for i, note in enumerate(user_notes.values()))
        context.user_data['notes'] = user_notes
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{notes_list}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove())
        return EDIT_NOTE_CHOOSE
    
    elif text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if not user_notes:
            await update.message.reply_text(
                "–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=create_keyboard(notes_menu_keyboard))
            return VIEW_NOTES
        
        notes_list = "\n".join(
            f"{i+1}. {note['text']}"
            for i, note in enumerate(user_notes.values()))
        context.user_data['notes'] = user_notes
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{notes_list}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=ReplyKeyboardRemove())
        return DELETE_NOTE
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=create_keyboard(notes_menu_keyboard))
        return VIEW_NOTES

async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    note_text = update.message.text
    current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    notes = load_notes()
    if user_id not in notes:
        notes[user_id] = {}
    if category not in notes[user_id]:
        notes[user_id][category] = {}
    
    note_id = str(len(notes[user_id][category]) + 1)  # –°–Ω–∞—á–∞–ª–∞ +1, –ø–æ—Ç–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
    
    notes[user_id][category][note_id] = {
        'text': note_text,
        'date': current_date
    }
    
    save_notes(notes)
    
    await update.message.reply_text(
        f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–î–∞—Ç–∞: {current_date}",
        reply_markup=create_keyboard(notes_menu_keyboard))
    return VIEW_NOTES

async def edit_note_choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        note_num = int(update.message.text) - 1
        user_notes = context.user_data['notes']
        note_ids = list(user_notes.keys())
        
        if 0 <= note_num < len(note_ids):
            note_id = note_ids[note_num]
            context.user_data['edit_note_id'] = note_id
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n{user_notes[note_id]['text']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                reply_markup=ReplyKeyboardRemove())
            return EDIT_NOTE
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=ReplyKeyboardRemove())
            return EDIT_NOTE_CHOOSE
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=ReplyKeyboardRemove())
        return EDIT_NOTE_CHOOSE

async def edit_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    category = context.user_data.get('category', '')
    note_id = context.user_data.get('edit_note_id')
    new_text = update.message.text
    
    notes = load_notes()
    if user_id in notes and category in notes[user_id] and note_id in notes[user_id][category]:
        notes[user_id][category][note_id]['text'] = new_text
        notes[user_id][category][note_id]['date'] = datetime.now().strftime("%d.%m.%Y %H:%M")
        save_notes(notes)
        
        await update.message.reply_text(
            "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=create_keyboard(notes_menu_keyboard))
    else:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.",
            reply_markup=create_keyboard(notes_menu_keyboard))
    
    return VIEW_NOTES

async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        note_num = int(update.message.text) - 1
        user_id = str(update.message.from_user.id)
        category = context.user_data.get('category', '')
        user_notes = context.user_data['notes']
        note_ids = list(user_notes.keys())
        
        if 0 <= note_num < len(note_ids):
            note_id = note_ids[note_num]
            
            notes = load_notes()
            if user_id in notes and category in notes[user_id] and note_id in notes[user_id][category]:
                del notes[user_id][category][note_id]
                save_notes(notes)
                
                await update.message.reply_text(
                    "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=create_keyboard(notes_menu_keyboard))
            else:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.",
                    reply_markup=create_keyboard(notes_menu_keyboard))
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.",
                reply_markup=create_keyboard(notes_menu_keyboard))
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=create_keyboard(notes_menu_keyboard))
    
    return VIEW_NOTES

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^(–§–∏–ª—å–º—ã|–°–µ—Ä–∏–∞–ª—ã|–ö–Ω–∏–≥–∏)$"), main_menu)
            ],
            FILMS_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), films_menu)
            ],
            SERIES_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), series_menu)
            ],
            BOOKS_MENU: [
                MessageHandler(filters.Regex("^(–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|–§–∏–ª—å—Ç—Ä|–ò–∑–±—Ä–∞–Ω–Ω–æ–µ|–ó–∞–º–µ—Ç–∫–∏|–ù–∞–∑–∞–¥)$"), books_menu)
            ],
            VIEW_NOTES: [
                MessageHandler(filters.Regex("^(–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏|–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É|–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É|–ù–∞–∑–∞–¥)$"), view_notes)
            ],
            ADD_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_note)
            ],
            EDIT_NOTE_CHOOSE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_note_choose)
            ],
            EDIT_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_note)
            ],
            DELETE_NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_note)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
